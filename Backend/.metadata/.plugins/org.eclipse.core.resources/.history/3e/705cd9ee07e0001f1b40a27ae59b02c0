package com.pgmates.controller;

import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.pgmates.config.JwtUtil;
import com.pgmates.dto.UserDto;
import com.pgmates.service.AuthService;


@RestController
@RequestMapping("/api/authenticate")
@CrossOrigin(origins = "http://localhost:5173")
public class AuthController {

	    @Autowired
	    private AuthService authService;

	    @Autowired
	    private JwtUtil jwtUtil;

	    @PostMapping("/register")
	    public ResponseEntity<UserDto> registerUser(@RequestBody UserDto userDTO){
	    	UserDto registeredUser = authService.registerUser(userDTO);
	        return ResponseEntity.ok(registeredUser);
	    }

	    @PostMapping("/login")
	    public ResponseEntity<?> loginUser(@RequestBody UserDto userDTO) {
	    	UserDto authenticatedUser = authService.authenticateUser(userDTO.getEmail(), userDTO.getPassword());
	        if (authenticatedUser != null) {
	            String token = jwtUtil.generateToken(authenticatedUser);
	            
	            // Creating a mutable map
	            Map<String, Object> response = new HashMap<>();
	            response.put("token", token);
	            response.put("user", authenticatedUser);

	            return ResponseEntity.ok(response);
	        }
	        return ResponseEntity.status(401).body(Collections.singletonMap("message", "Invalid credentials"));
	    }



	    @GetMapping("/profile")
	    public ResponseEntity<UserDto> getUserProfile(@RequestHeader("Authorization") String token) {
	        String username = jwtUtil.extractUsername(token.substring(7));
	        UserDto userDTO = authService.authenticateUser(username, null); // Fetch user without password check
	        return ResponseEntity.ok(userDTO);
	    }
	}

