package com.pgmates.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
public class SecurityConfig {

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
    
    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration authConfig) throws Exception {
        return authConfig.getAuthenticationManager();
    }

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http.csrf(csrf -> csrf.disable()) // Disable CSRF
            .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS)) // Stateless session
            .authorizeHttpRequests(auth -> auth
                .requestMatchers("/api/authenticate/register").permitAll() // Allow public access to register endpoint
                .requestMatchers("/api/authenticate/login").permitAll() // Allow public access to login endpoint
                .requestMatchers("/admin/**").hasRole("ADMIN") // Only ADMIN can access admin endpoints
                .requestMatchers("/owner/**").hasRole("OWNER") // Only OWNER can access owner endpoints
                .requestMatchers("/user/**").hasRole("ROLE_USER") // Only USER can access user endpoints
                .anyRequest().authenticated() // Secure all other endpoints
            );

        return http.build();
    }
}
